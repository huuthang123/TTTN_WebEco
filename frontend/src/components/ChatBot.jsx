import React, { useState, useEffect } from 'react';
import { useCart } from '../context/CartContext';
import { GoogleGenerativeAI } from '@google/generative-ai';
import '../styles/ChatBot.css';

function ChatBot() {
    const [isChatOpen, setIsChatOpen] = useState(false);
    const [chatMessages, setChatMessages] = useState([]);
    const [userInput, setUserInput] = useState('');
    const [isChatLoading, setIsChatLoading] = useState(false);
    const [hasGreeted, setHasGreeted] = useState(false); // Bi·∫øn ki·ªÉm so√°t vi·ªác ch√†o

    const { cartItems, total, totalItems } = useCart();

    const genAI = new GoogleGenerativeAI('AIzaSyA4rBPt3rEcC0Bc0LDgille2BGAUCUbns0'); // Thay b·∫±ng API Key c·ªßa b·∫°n
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    useEffect(() => {
        // T·∫°o th√¥ng tin s·∫£n ph·∫©m
        const productInfo = cartItems.length > 0
            ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, S·ªë l∆∞·ª£ng: ${item.quantity}, Danh m·ª•c: ${item.category || 'Kh√¥ng x√°c ƒë·ªãnh'}`).join('\n')
            : 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.';

        // Ch·ªâ ch√†o m·ªôt l·∫ßn khi chatbot kh·ªüi t·∫°o
        if (!hasGreeted) {
            setChatMessages([
                { role: 'model', text: `Xin ch√†o! T√¥i l√† chatbot h·ªó tr·ª£ gi·ªè h√†ng. ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n:\n${productInfo}\nT·ªïng ti·ªÅn: ${total.toLocaleString()} VND\nT·ªïng s·ªë l∆∞·ª£ng: ${totalItems}\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i c√°c c√¢u nh∆∞: "S·∫£n ph·∫©m B√≤ Kho gi√° bao nhi√™u?", "T·ªïng ti·ªÅn l√† bao nhi√™u?", ho·∫∑c "C√≥ s·∫£n ph·∫©m n√†o c√πng lo·∫°i v·ªõi B√≤ Kho kh√¥ng?"` }
            ]);
            setHasGreeted(true); // ƒê√°nh d·∫•u ƒë√£ ch√†o
        } else {
            // C·∫≠p nh·∫≠t th√¥ng tin gi·ªè h√†ng m√† kh√¥ng ch√†o l·∫°i
            setChatMessages(prev => {
                const updatedMessages = [...prev];
                if (updatedMessages.length > 0) {
                    updatedMessages[0] = {
                        role: 'model',
                        text: `ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n:\n${productInfo}\nT·ªïng ti·ªÅn: ${total.toLocaleString()} VND\nT·ªïng s·ªë l∆∞·ª£ng: ${totalItems}\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i c√°c c√¢u nh∆∞: "S·∫£n ph·∫©m B√≤ Kho gi√° bao nhi√™u?", "T·ªïng ti·ªÅn l√† bao nhi√™u?", ho·∫∑c "C√≥ s·∫£n ph·∫©m n√†o c√πng lo·∫°i v·ªõi B√≤ Kho kh√¥ng?"`
                    };
                }
                return updatedMessages;
            });
        }

        // T·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
        const chatBox = document.getElementById('chatBox');
        if (chatBox) {
            chatBox.scrollTop = chatBox.scrollHeight;
        }
    }, [cartItems, total, totalItems, hasGreeted]);

    const toggleChat = () => {
        setIsChatOpen(!isChatOpen);
    };

    const handleSendMessage = async () => {
        if (!userInput.trim()) return;

        setChatMessages(prev => [...prev, { role: 'user', text: userInput }]);
        setIsChatLoading(true);

        try {
            // T·∫°o th√¥ng tin s·∫£n ph·∫©m
            const productInfo = cartItems.length > 0
                ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, S·ªë l∆∞·ª£ng: ${item.quantity}, Danh m·ª•c: ${item.category || 'Kh√¥ng x√°c ƒë·ªãnh'}`).join('\n')
                : 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.';

            // T·∫°o prompt chi ti·∫øt
            const prompt = `
B·∫°n l√† m·ªôt chatbot h·ªó tr·ª£ gi·ªè h√†ng th√¢n thi·ªán v√† chuy√™n nghi·ªáp. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v·ªÅ gi·ªè h√†ng m·ªôt c√°ch ch√≠nh x√°c, t·ª± nhi√™n v√† d·ªÖ hi·ªÉu. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin gi·ªè h√†ng hi·ªán t·∫°i:

**Danh s√°ch s·∫£n ph·∫©m**:
${productInfo}

**T·ªïng ti·ªÅn**: ${total.toLocaleString()} VND
**T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m**: ${totalItems}



**C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng**: ${userInput}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† t·ª± nhi√™n.
            `;

            // G·ªçi Gemini API
            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();

            // Th√™m ph·∫£n h·ªìi c·ªßa chatbot v√†o chat
            setChatMessages(prev => [...prev, { role: 'model', text }]);
        } catch (error) {
            console.error('L·ªói khi g·ªçi Gemini API:', error);
            setChatMessages(prev => [...prev, { role: 'model', text: 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau!' }]);
        } finally {
            setIsChatLoading(false);
            setUserInput('');
        }
    };

    return (
        <>
            <div className="chat-icon" onClick={toggleChat}>
                üí¨
            </div>
            <div className={`chat-container ${isChatOpen ? '' : 'hidden'}`} id="chatContainer">
                <div className="chat-header">
                    <h2>Chat v·ªõi AI</h2>
                    <button className="close-chat-btn" onClick={toggleChat}>
                        <i className="fas fa-times"></i>
                    </button>
                </div>
                <div className="chat-box" id="chatBox">
                    {chatMessages.map((msg, index) => (
                        <div key={index} className={`chat-message ${msg.role}`}>
                            <p>{msg.text}</p>
                        </div>
                    ))}
                    {isChatLoading && <div className="chat-message model">ƒêang x·ª≠ l√Ω...</div>}
                </div>
                <div className="input-group">
                    <input
                        type="text"
                        id="userInput"
                        placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                        value={userInput}
                        onChange={(e) => setUserInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    />
                    <button onClick={handleSendMessage}>G·ª≠i</button>
                </div>
            </div>
        </>
    );
}

export default ChatBot;