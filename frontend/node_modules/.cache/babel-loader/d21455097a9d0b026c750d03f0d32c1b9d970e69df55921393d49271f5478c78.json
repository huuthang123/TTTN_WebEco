{"ast":null,"code":"var _jsxFileName = \"D:\\\\N\\u0103m 4 K\\xEC 2\\\\Ph\\xE1t tri\\u1EC3n h\\u1EC7 th\\u1ED1ng th\\u01B0\\u01A1ng m\\u1EA1i \\u0111i\\u1EC7n t\\u1EED\\\\ecommerce-app\\\\frontend\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useCart } from '../context/CartContext';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport './chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [isChatLoading, setIsChatLoading] = useState(false);\n  const [hasGreeted, setHasGreeted] = useState(false); // Biến kiểm soát việc chào\n\n  const {\n    cartItems,\n    total,\n    totalItems\n  } = useCart();\n  const genAI = new GoogleGenerativeAI('YOUR_GEMINI_API_KEY'); // Thay bằng API Key của bạn\n  const model = genAI.getGenerativeModel({\n    model: 'gemini-pro'\n  });\n  useEffect(() => {\n    // Tạo thông tin sản phẩm\n    const productInfo = cartItems.length > 0 ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, Số lượng: ${item.quantity}, Danh mục: ${item.category || 'Không xác định'}`).join('\\n') : 'Giỏ hàng của bạn đang trống.';\n\n    // Chỉ chào một lần khi chatbot khởi tạo\n    if (!hasGreeted) {\n      setChatMessages([{\n        role: 'model',\n        text: `Xin chào! Tôi là chatbot hỗ trợ giỏ hàng. Đây là danh sách sản phẩm trong giỏ hàng của bạn:\\n${productInfo}\\nTổng tiền: ${total.toLocaleString()} VND\\nTổng số lượng: ${totalItems}\\nBạn có thể hỏi tôi các câu như: \"Sản phẩm Bò Kho giá bao nhiêu?\", \"Tổng tiền là bao nhiêu?\", hoặc \"Có sản phẩm nào cùng loại với Bò Kho không?\"`\n      }]);\n      setHasGreeted(true); // Đánh dấu đã chào\n    } else {\n      // Cập nhật thông tin giỏ hàng mà không chào lại\n      setChatMessages(prev => {\n        const updatedMessages = [...prev];\n        if (updatedMessages.length > 0) {\n          updatedMessages[0] = {\n            role: 'model',\n            text: `Đây là danh sách sản phẩm trong giỏ hàng của bạn:\\n${productInfo}\\nTổng tiền: ${total.toLocaleString()} VND\\nTổng số lượng: ${totalItems}\\nBạn có thể hỏi tôi các câu như: \"Sản phẩm Bò Kho giá bao nhiêu?\", \"Tổng tiền là bao nhiêu?\", hoặc \"Có sản phẩm nào cùng loại với Bò Kho không?\"`\n          };\n        }\n        return updatedMessages;\n      });\n    }\n\n    // Tự động cuộn xuống tin nhắn mới nhất\n    const chatBox = document.getElementById('chatBox');\n    if (chatBox) {\n      chatBox.scrollTop = chatBox.scrollHeight;\n    }\n  }, [cartItems, total, totalItems, hasGreeted]);\n  const toggleChat = () => {\n    setIsChatOpen(!isChatOpen);\n  };\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    setChatMessages(prev => [...prev, {\n      role: 'user',\n      text: userInput\n    }]);\n    setIsChatLoading(true);\n    try {\n      // Tạo thông tin sản phẩm\n      const productInfo = cartItems.length > 0 ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, Số lượng: ${item.quantity}, Danh mục: ${item.category || 'Không xác định'}`).join('\\n') : 'Giỏ hàng của bạn đang trống.';\n\n      // Tạo prompt chi tiết\n      const prompt = `\nBạn là một chatbot hỗ trợ giỏ hàng thân thiện và chuyên nghiệp. Nhiệm vụ của bạn là trả lời các câu hỏi của người dùng về giỏ hàng một cách chính xác, tự nhiên và dễ hiểu. Dưới đây là thông tin giỏ hàng hiện tại:\n\n**Danh sách sản phẩm**:\n${productInfo}\n\n**Tổng tiền**: ${total.toLocaleString()} VND\n**Tổng số lượng sản phẩm**: ${totalItems}\n\n**Hướng dẫn**:\n1. Nếu người dùng hỏi về giá của một sản phẩm (ví dụ: \"Sản phẩm Bò Kho giá bao nhiêu?\"), hãy trả lời chính xác giá của sản phẩm đó.\n2. Nếu người dùng hỏi về số lượng của một sản phẩm (ví dụ: \"Có bao nhiêu Bò Kho trong giỏ hàng?\"), hãy trả lời số lượng chính xác.\n3. Nếu người dùng hỏi về tổng tiền hoặc tổng số lượng (ví dụ: \"Tổng tiền là bao nhiêu?\"), hãy trả lời dựa trên thông tin tổng tiền và tổng số lượng.\n4. Nếu người dùng hỏi về sản phẩm không có trong giỏ hàng (ví dụ: \"Sản phẩm Gà Rán giá bao nhiêu?\" mà giỏ hàng không có Gà Rán), hãy trả lời: \"Sản phẩm này hiện không có trong giỏ hàng của bạn.\"\n5. Nếu người dùng hỏi về sản phẩm cùng loại (ví dụ: \"Có sản phẩm nào cùng loại với Bò Kho không?\"), hãy tìm các sản phẩm có cùng danh mục với sản phẩm được hỏi (dựa trên \"Danh mục\") và có giá chênh lệch không quá 20,000 VND so với sản phẩm đó. Nếu có, hãy gợi ý các sản phẩm đó. Nếu không, hãy trả lời: \"Hiện tại không có sản phẩm nào cùng loại với [tên sản phẩm] trong giỏ hàng có giá chênh lệch không quá 20,000 VND.\"\n6. Nếu người dùng hỏi câu không liên quan (ví dụ: \"Hôm nay thời tiết thế nào?\"), hãy trả lời khéo léo: \"Xin lỗi, tôi chỉ có thể giúp bạn với các câu hỏi về giỏ hàng. Bạn muốn hỏi gì về sản phẩm không?\"\n7. Trả lời bằng tiếng Việt, tự nhiên và thân thiện.\n\n**Câu hỏi của người dùng**: ${userInput}\n\nHãy trả lời câu hỏi của người dùng một cách chính xác và tự nhiên.\n            `;\n\n      // Gọi Gemini API\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      // Thêm phản hồi của chatbot vào chat\n      setChatMessages(prev => [...prev, {\n        role: 'model',\n        text\n      }]);\n    } catch (error) {\n      console.error('Lỗi khi gọi Gemini API:', error);\n      setChatMessages(prev => [...prev, {\n        role: 'model',\n        text: 'Xin lỗi, tôi không thể trả lời ngay bây giờ. Vui lòng thử lại sau!'\n      }]);\n    } finally {\n      setIsChatLoading(false);\n      setUserInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-icon\",\n      onClick: toggleChat,\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-container ${isChatOpen ? '' : 'hidden'}`,\n      id: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chat v\\u1EDBi AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-chat-btn\",\n          onClick: toggleChat,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        id: \"chatBox\",\n        children: [chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.role}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)), isChatLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message model\",\n          children: \"\\u0110ang x\\u1EED l\\xFD...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"userInput\",\n          placeholder: \"Nh\\u1EADp tin nh\\u1EAFn c\\u1EE7a b\\u1EA1n...\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"G\\u1EEDi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatBot, \"0abNIkm/GME0fdCzFVWNkXcdEpM=\", false, function () {\n  return [useCart];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useCart","GoogleGenerativeAI","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBot","_s","isChatOpen","setIsChatOpen","chatMessages","setChatMessages","userInput","setUserInput","isChatLoading","setIsChatLoading","hasGreeted","setHasGreeted","cartItems","total","totalItems","genAI","model","getGenerativeModel","productInfo","length","map","item","name","price","toLocaleString","quantity","category","join","role","text","prev","updatedMessages","chatBox","document","getElementById","scrollTop","scrollHeight","toggleChat","handleSendMessage","trim","prompt","result","generateContent","response","error","console","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","msg","index","type","placeholder","value","onChange","e","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["D:/Năm 4 Kì 2/Phát triển hệ thống thương mại điện tử/ecommerce-app/frontend/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useCart } from '../context/CartContext';\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport './chatbot.css';\r\n\r\nfunction ChatBot() {\r\n    const [isChatOpen, setIsChatOpen] = useState(false);\r\n    const [chatMessages, setChatMessages] = useState([]);\r\n    const [userInput, setUserInput] = useState('');\r\n    const [isChatLoading, setIsChatLoading] = useState(false);\r\n    const [hasGreeted, setHasGreeted] = useState(false); // Biến kiểm soát việc chào\r\n\r\n    const { cartItems, total, totalItems } = useCart();\r\n\r\n    const genAI = new GoogleGenerativeAI('YOUR_GEMINI_API_KEY'); // Thay bằng API Key của bạn\r\n    const model = genAI.getGenerativeModel({ model: 'gemini-pro' });\r\n\r\n    useEffect(() => {\r\n        // Tạo thông tin sản phẩm\r\n        const productInfo = cartItems.length > 0\r\n            ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, Số lượng: ${item.quantity}, Danh mục: ${item.category || 'Không xác định'}`).join('\\n')\r\n            : 'Giỏ hàng của bạn đang trống.';\r\n\r\n        // Chỉ chào một lần khi chatbot khởi tạo\r\n        if (!hasGreeted) {\r\n            setChatMessages([\r\n                { role: 'model', text: `Xin chào! Tôi là chatbot hỗ trợ giỏ hàng. Đây là danh sách sản phẩm trong giỏ hàng của bạn:\\n${productInfo}\\nTổng tiền: ${total.toLocaleString()} VND\\nTổng số lượng: ${totalItems}\\nBạn có thể hỏi tôi các câu như: \"Sản phẩm Bò Kho giá bao nhiêu?\", \"Tổng tiền là bao nhiêu?\", hoặc \"Có sản phẩm nào cùng loại với Bò Kho không?\"` }\r\n            ]);\r\n            setHasGreeted(true); // Đánh dấu đã chào\r\n        } else {\r\n            // Cập nhật thông tin giỏ hàng mà không chào lại\r\n            setChatMessages(prev => {\r\n                const updatedMessages = [...prev];\r\n                if (updatedMessages.length > 0) {\r\n                    updatedMessages[0] = {\r\n                        role: 'model',\r\n                        text: `Đây là danh sách sản phẩm trong giỏ hàng của bạn:\\n${productInfo}\\nTổng tiền: ${total.toLocaleString()} VND\\nTổng số lượng: ${totalItems}\\nBạn có thể hỏi tôi các câu như: \"Sản phẩm Bò Kho giá bao nhiêu?\", \"Tổng tiền là bao nhiêu?\", hoặc \"Có sản phẩm nào cùng loại với Bò Kho không?\"`\r\n                    };\r\n                }\r\n                return updatedMessages;\r\n            });\r\n        }\r\n\r\n        // Tự động cuộn xuống tin nhắn mới nhất\r\n        const chatBox = document.getElementById('chatBox');\r\n        if (chatBox) {\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n        }\r\n    }, [cartItems, total, totalItems, hasGreeted]);\r\n\r\n    const toggleChat = () => {\r\n        setIsChatOpen(!isChatOpen);\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setChatMessages(prev => [...prev, { role: 'user', text: userInput }]);\r\n        setIsChatLoading(true);\r\n\r\n        try {\r\n            // Tạo thông tin sản phẩm\r\n            const productInfo = cartItems.length > 0\r\n                ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, Số lượng: ${item.quantity}, Danh mục: ${item.category || 'Không xác định'}`).join('\\n')\r\n                : 'Giỏ hàng của bạn đang trống.';\r\n\r\n            // Tạo prompt chi tiết\r\n            const prompt = `\r\nBạn là một chatbot hỗ trợ giỏ hàng thân thiện và chuyên nghiệp. Nhiệm vụ của bạn là trả lời các câu hỏi của người dùng về giỏ hàng một cách chính xác, tự nhiên và dễ hiểu. Dưới đây là thông tin giỏ hàng hiện tại:\r\n\r\n**Danh sách sản phẩm**:\r\n${productInfo}\r\n\r\n**Tổng tiền**: ${total.toLocaleString()} VND\r\n**Tổng số lượng sản phẩm**: ${totalItems}\r\n\r\n**Hướng dẫn**:\r\n1. Nếu người dùng hỏi về giá của một sản phẩm (ví dụ: \"Sản phẩm Bò Kho giá bao nhiêu?\"), hãy trả lời chính xác giá của sản phẩm đó.\r\n2. Nếu người dùng hỏi về số lượng của một sản phẩm (ví dụ: \"Có bao nhiêu Bò Kho trong giỏ hàng?\"), hãy trả lời số lượng chính xác.\r\n3. Nếu người dùng hỏi về tổng tiền hoặc tổng số lượng (ví dụ: \"Tổng tiền là bao nhiêu?\"), hãy trả lời dựa trên thông tin tổng tiền và tổng số lượng.\r\n4. Nếu người dùng hỏi về sản phẩm không có trong giỏ hàng (ví dụ: \"Sản phẩm Gà Rán giá bao nhiêu?\" mà giỏ hàng không có Gà Rán), hãy trả lời: \"Sản phẩm này hiện không có trong giỏ hàng của bạn.\"\r\n5. Nếu người dùng hỏi về sản phẩm cùng loại (ví dụ: \"Có sản phẩm nào cùng loại với Bò Kho không?\"), hãy tìm các sản phẩm có cùng danh mục với sản phẩm được hỏi (dựa trên \"Danh mục\") và có giá chênh lệch không quá 20,000 VND so với sản phẩm đó. Nếu có, hãy gợi ý các sản phẩm đó. Nếu không, hãy trả lời: \"Hiện tại không có sản phẩm nào cùng loại với [tên sản phẩm] trong giỏ hàng có giá chênh lệch không quá 20,000 VND.\"\r\n6. Nếu người dùng hỏi câu không liên quan (ví dụ: \"Hôm nay thời tiết thế nào?\"), hãy trả lời khéo léo: \"Xin lỗi, tôi chỉ có thể giúp bạn với các câu hỏi về giỏ hàng. Bạn muốn hỏi gì về sản phẩm không?\"\r\n7. Trả lời bằng tiếng Việt, tự nhiên và thân thiện.\r\n\r\n**Câu hỏi của người dùng**: ${userInput}\r\n\r\nHãy trả lời câu hỏi của người dùng một cách chính xác và tự nhiên.\r\n            `;\r\n\r\n            // Gọi Gemini API\r\n            const result = await model.generateContent(prompt);\r\n            const response = await result.response;\r\n            const text = response.text();\r\n\r\n            // Thêm phản hồi của chatbot vào chat\r\n            setChatMessages(prev => [...prev, { role: 'model', text }]);\r\n        } catch (error) {\r\n            console.error('Lỗi khi gọi Gemini API:', error);\r\n            setChatMessages(prev => [...prev, { role: 'model', text: 'Xin lỗi, tôi không thể trả lời ngay bây giờ. Vui lòng thử lại sau!' }]);\r\n        } finally {\r\n            setIsChatLoading(false);\r\n            setUserInput('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"chat-icon\" onClick={toggleChat}>\r\n                💬\r\n            </div>\r\n            <div className={`chat-container ${isChatOpen ? '' : 'hidden'}`} id=\"chatContainer\">\r\n                <div className=\"chat-header\">\r\n                    <h2>Chat với AI</h2>\r\n                    <button className=\"close-chat-btn\" onClick={toggleChat}>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n                <div className=\"chat-box\" id=\"chatBox\">\r\n                    {chatMessages.map((msg, index) => (\r\n                        <div key={index} className={`chat-message ${msg.role}`}>\r\n                            <p>{msg.text}</p>\r\n                        </div>\r\n                    ))}\r\n                    {isChatLoading && <div className=\"chat-message model\">Đang xử lý...</div>}\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"userInput\"\r\n                        placeholder=\"Nhập tin nhắn của bạn...\"\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\r\n                    />\r\n                    <button onClick={handleSendMessage}>Gửi</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}