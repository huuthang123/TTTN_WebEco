{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/addresses';\nconst AddressService = {\n  getAddresses: async token => {\n    try {\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\n      const response = await axios.get(API_URL, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Lỗi khi lấy danh sách địa chỉ:', error);\n      throw error;\n    }\n  },\n  addAddress: async (address, token) => {\n    try {\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\n      const response = await axios.post(API_URL, address, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data.address;\n    } catch (error) {\n      console.error('Lỗi khi thêm địa chỉ:', error);\n      throw error;\n    }\n  },\n  updateAddress: async (id, updatedAddress, token) => {\n    try {\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\n      const response = await axios.put(`${API_URL}/${id}`, updatedAddress, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data.address;\n    } catch (error) {\n      console.error('Lỗi khi cập nhật địa chỉ:', error);\n      throw error;\n    }\n  },\n  deleteAddress: async (id, token) => {\n    try {\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\n      await axios.delete(`${API_URL}/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedAddresses = await AddressService.getAddresses(token);\n      return updatedAddresses;\n    } catch (error) {\n      console.error('Lỗi khi xóa địa chỉ:', error);\n      throw error;\n    }\n  }\n};\nexport default AddressService;","map":{"version":3,"names":["axios","API_URL","AddressService","getAddresses","token","Error","response","get","headers","Authorization","data","error","console","addAddress","address","post","updateAddress","id","updatedAddress","put","deleteAddress","delete","updatedAddresses"],"sources":["D:/Năm 4 Kì 2/Phát triển hệ thống thương mại điện tử/ecommerce-app/frontend/src/services/AddressService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/addresses';\r\n\r\nconst AddressService = {\r\n  getAddresses: async (token) => {\r\n    try {\r\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\r\n      const response = await axios.get(API_URL, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Lỗi khi lấy danh sách địa chỉ:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addAddress: async (address, token) => {\r\n    try {\r\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\r\n      const response = await axios.post(API_URL, address, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data.address;\r\n    } catch (error) {\r\n      console.error('Lỗi khi thêm địa chỉ:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateAddress: async (id, updatedAddress, token) => {\r\n    try {\r\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\r\n      const response = await axios.put(`${API_URL}/${id}`, updatedAddress, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data.address;\r\n    } catch (error) {\r\n      console.error('Lỗi khi cập nhật địa chỉ:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteAddress: async (id, token) => {\r\n    try {\r\n      if (!token) throw new Error('Token không tồn tại. Vui lòng đăng nhập lại.');\r\n      await axios.delete(`${API_URL}/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      const updatedAddresses = await AddressService.getAddresses(token);\r\n      return updatedAddresses;\r\n    } catch (error) {\r\n      console.error('Lỗi khi xóa địa chỉ:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default AddressService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,qCAAqC;AAErD,MAAMC,cAAc,GAAG;EACrBC,YAAY,EAAE,MAAOC,KAAK,IAAK;IAC7B,IAAI;MACF,IAAI,CAACA,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MAC3E,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACN,OAAO,EAAE;QACxCO,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAG;MAC9C,CAAC,CAAC;MACF,OAAOE,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,UAAU,EAAE,MAAAA,CAAOC,OAAO,EAAEV,KAAK,KAAK;IACpC,IAAI;MACF,IAAI,CAACA,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MAC3E,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAI,CAACd,OAAO,EAAEa,OAAO,EAAE;QAClDN,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAG;MAC9C,CAAC,CAAC;MACF,OAAOE,QAAQ,CAACI,IAAI,CAACI,OAAO;IAC9B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDK,aAAa,EAAE,MAAAA,CAAOC,EAAE,EAAEC,cAAc,EAAEd,KAAK,KAAK;IAClD,IAAI;MACF,IAAI,CAACA,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MAC3E,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACmB,GAAG,CAAC,GAAGlB,OAAO,IAAIgB,EAAE,EAAE,EAAEC,cAAc,EAAE;QACnEV,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAG;MAC9C,CAAC,CAAC;MACF,OAAOE,QAAQ,CAACI,IAAI,CAACI,OAAO;IAC9B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDS,aAAa,EAAE,MAAAA,CAAOH,EAAE,EAAEb,KAAK,KAAK;IAClC,IAAI;MACF,IAAI,CAACA,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MAC3E,MAAML,KAAK,CAACqB,MAAM,CAAC,GAAGpB,OAAO,IAAIgB,EAAE,EAAE,EAAE;QACrCT,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAG;MAC9C,CAAC,CAAC;MACF,MAAMkB,gBAAgB,GAAG,MAAMpB,cAAc,CAACC,YAAY,CAACC,KAAK,CAAC;MACjE,OAAOkB,gBAAgB;IACzB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeT,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}