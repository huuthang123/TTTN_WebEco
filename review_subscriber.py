import redis
import json
import requests
from summarizer import summarize_text  # file summarizer.py b·∫°n v·ª´a t·∫°o

# C·∫•u h√¨nh Redis v√† Node.js API
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
CHANNEL_NAME = 'reviews'
NODE_ENDPOINT = "http://localhost:3000/api/summaries"

# K·∫øt n·ªëi Redis
r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
pubsub = r.pubsub()
pubsub.subscribe(CHANNEL_NAME)

print(f"üîî ƒêang l·∫Øng nghe review m·ªõi tr√™n channel: {CHANNEL_NAME}...")

for message in pubsub.listen():
    if message['type'] == 'message':
        try:
            # Parse d·ªØ li·ªáu review t·ª´ Redis
            review = json.loads(message['data'])
            review_id = review.get("_id")
            product_id = review.get("productId")
            comment = review.get("comment", "")

            print(f"\nüìù Nh·∫≠n review m·ªõi: {review_id}")
            print(f"N·ªôi dung: {comment}")

            # T√≥m t·∫Øt b·∫±ng fastText
            summary = summarize_text(comment, top_n=3)
            print(f"üìÑ T√≥m t·∫Øt: {summary}")

            # G·ª≠i t√≥m t·∫Øt v·ªÅ Node.js
            payload = {
                "reviewId": review_id,
                "productId": product_id,
                "summary": summary
            }
            res = requests.post(NODE_ENDPOINT, json=payload)
            if res.status_code == 200:
                print(f"‚úÖ ƒê√£ g·ª≠i t√≥m t·∫Øt cho review {review_id} v·ªÅ Node.js")
            else:
                print(f"‚ö†Ô∏è L·ªói g·ª≠i summary ({res.status_code}): {res.text}")

        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω review: {e}")
